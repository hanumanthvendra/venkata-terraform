# New EKS cluster in Auto Mode (NO managed node groups)
resource "aws_eks_cluster" "this" {
  name     = var.cluster_name
  version  = var.cluster_version
  role_arn = aws_iam_role.cluster.arn

  # Auto Mode must manage core add-ons
  bootstrap_self_managed_addons = false

  # Access Entries authentication (required by Auto Mode)
  access_config {
    authentication_mode                         = "API"   # or "API_AND_CONFIG_MAP"
    bootstrap_cluster_creator_admin_permissions = true    # creator gets admin initially
  }

  # All three Auto Mode feature flags must be set to TRUE
  compute_config {
    enabled       = true
    node_pools    = ["general-purpose"]         # optional default pool
    node_role_arn = aws_iam_role.node.arn       # optional but supported
  }

  kubernetes_network_config {
    elastic_load_balancing {
      enabled = true
    }
  }

  storage_config {
    block_storage {
      enabled = true
    }
  }

  vpc_config {
    endpoint_private_access = true
    endpoint_public_access  = true
    subnet_ids              = local.subnet_ids
  }

  enabled_cluster_log_types = [
    "api", "audit", "authenticator", "controllerManager", "scheduler"
  ]

  tags = merge(var.tags, { Name = var.cluster_name, ManagedBy = var.iam_role_prefix })

  # Ensure IAM policy attachments exist before EKS tries to create infra
  depends_on = [
    aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy,
    aws_iam_role_policy_attachment.cluster_AmazonEKSComputePolicy,
    aws_iam_role_policy_attachment.cluster_AmazonEKSNetworkingPolicy,
    aws_iam_role_policy_attachment.cluster_AmazonEKSLoadBalancingPolicy,
    aws_iam_role_policy_attachment.cluster_AmazonEKSBlockStoragePolicy,
    aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodeMinimalPolicy,
    aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryPullOnly,
  ]
}
